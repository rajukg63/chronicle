# Product: Duo
# Category: Authentication
# Supported Format: JSON
# Reference: See below
# Last Updated: 2025-02-26
# Copyright 2025 Google SecOps

# Additional references:
# https://duo.com/docs/adminapi#authentication-logs
# https://help.duo.com/s/article/1023?language=en_US

filter {
  mutate {
    replace => {
      "event_type" => ""
      "email" => ""
      "platform" => ""
      "factor" => ""
      "reason" => ""
      "user.name" => ""
      "user.key" => ""
      "application.destination_name" => ""
      "auth_device.name" => ""
      "application.name" => ""
      "auth_device.ip" => ""
      "auth_device.location.city" => ""
      "auth_device.location.state" => ""
      "auth_device.location.country" => ""
      "access_device.os" => ""
      "access_device.os_version" => ""
      "access_device.location.city" => ""
      "access_device.location.state" => ""
      "access_device.location.country" => ""
      "access_device.hostname" => ""
      "access_device.ip" => ""
      "_action" => ""
      "_authMechanism" => ""
      "txid" => ""
      "access_device.browser" => ""
      "application.key" => ""
      "result" => ""
      "msg" => ""
      "auth_stage" => ""
      "status" => ""
      "server_section" => ""
      "server_section_ikey" => ""
      "client_section" => ""
      "dn" => ""
      "log_logger.unpersistable" => ""
      "log_level.name" => ""
      "log_level.__class_uuid__" => ""
      "log_namespace" => ""
      "log_source" => ""
      "log_format" => ""
      "username" => ""
      "hostname" => ""
      "client_ip" => ""
      "userid" => ""
      "adaptive_trust_assessments.more_secure_auth.detected_attack_detectors" => ""
      "adaptive_trust_assessments.more_secure_auth.features_version" => ""
      "adaptive_trust_assessments.more_secure_auth.model_version" => ""
      "adaptive_trust_assessments.more_secure_auth.policy_enabled" => ""
      "adaptive_trust_assessments.more_secure_auth.preview_mode_enabled" => ""
      "adaptive_trust_assessments.more_secure_auth.reason" => ""
      "adaptive_trust_assessments.more_secure_auth.trust_level" => ""
      "adaptive_trust_assessments.remember_me.features_version" => ""
      "adaptive_trust_assessments.remember_me.model_version" => ""
      "adaptive_trust_assessments.remember_me.policy_enabled" => ""
      "adaptive_trust_assessments.remember_me.reason" => ""
      "adaptive_trust_assessments.remember_me.trust_level" => ""
    }
  }

  mutate {
    gsub => ["message",'\\\"([A-Z]*) Active Directory\\\"','$1 Active Directory']
  }

  json {
    source => "message"
    array_function => "split_columns"
    on_error => "not_json"
  }

  if [not_json] {
    drop {
      tag => "TAG_MALFORMED_MESSAGE"
    }
  }


  # Cast timestamp from integer to string
  mutate {
    convert => {
      "timestamp" => "string"
    }
    on_error => "already_string"
  }

  # Specifies timestamp as UNIX format
  date {
    match => ["timestamp", "UNIX", "ISO8601", "yyyy-MM-ddTHH:mm:ss.SSSSSSZ"]
    on_error => "invalid_date_format"
  }

  # UDM Metadata

  if [event_type] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.product_event_type" => "%{event_type}"
      }
      on_error => "no_event_type"
    }
  }
  else if [auth_stage] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.product_event_type" => "%{event_type}"
      }
      on_error => "no_event_type"
    }
  }

  if [access_device][browser] != "" {
    mutate {
      replace => {
        "browser_name.key" => "Browser"
        "browser_name.value" => "%{access_device.browser}"
      }
      on_error => "no_browser_name"
    }
    mutate {
      merge => {
        "event.idm.read_only_udm.principal.resource.attribute.labels" => "browser_name"
      }
      on_error => "err1"
    }
  }

  if [server_section] != "" {
    mutate {
      replace => {
        "server_section_label.key" => "server_section"
        "server_section_label.value" => "%{server_section}"
      }
      on_error => "err1"
    }
    mutate {
      merge => {
        "event.idm.read_only_udm.target.resource.attribute.labels" => "server_section_label"
      }
      on_error => "err1"
    }
  }

  if [server_section_ikey] != "" {
    mutate {
      replace => {
        "server_section_ikey_label.key" => "server_section_ikey"
        "server_section_ikey_label.value" => "%{server_section_ikey}"
      }
      on_error => "err1"
    }
    mutate {
      merge => {
        "event.idm.read_only_udm.target.resource.attribute.labels" => "server_section_ikey_label"
      }
      on_error => "err1"
    }
  }

  if [client_section] != "" {
    mutate {
      replace => {
        "client_section_label.value" => "%{client_section}"
      }
      on_error => "client_section_empty"
    }
    if ![client_section_empty] {
      mutate {
        replace => {
          "client_section_label.key" => "client_section"
        }
      }
      mutate {
        merge => {
          "event.idm.read_only_udm.target.resource.attribute.labels" => "client_section_label"
        }
        on_error => "client_section_lable_empty"
      }
    }
  }

  if [log_namespace] != "" {
    mutate {
      replace => {
        "log_namespace_label.key" => "log_namespace"
        "log_namespace_label.value" => "%{log_namespace}"
      }
      on_error => "err1"
    }

    mutate {
      merge => {
        "event.idm.read_only_udm.target.resource.attribute.labels" => "log_namespace_label"
      }
      on_error => "err1"
    }
  }

  if [log_source] != "" {
    mutate {
      replace => {
        "log_source_label.key" => "log_source"
        "log_source_label.value" => "%{log_source}"
      }
      on_error => "err1"
    }

    mutate {
      merge => {
        "event.idm.read_only_udm.target.resource.attribute.labels" => "log_source_label"
      }
      on_error => "err1"
    }
  }

  if [log_format] != "" {
    mutate {
      replace => {
        "log_format_label.key" => "log_format"
        "log_format_label.value" => "%{log_format}"
      }
      on_error => "err1"
    }

    mutate {
      merge => {
        "event.idm.read_only_udm.target.resource.attribute.labels" => "log_format_label"
      }
      on_error => "err1"
    }
  }

  if [log_logger][unpersistable] != "" {
    mutate {
      convert => {
        "log_logger.unpersistable" => "string"
      }
      on_error => "convert_failed"
    }
    mutate {
      replace => {
        "unpersistable_label.key" => "unpersistable"
        "unpersistable_label.value" => "%{log_logger.unpersistable}"
      }
      on_error => "err1"
    }

    mutate {
      merge => {
        "event.idm.read_only_udm.target.resource.attribute.labels" => "unpersistable_label"
      }
      on_error => "err1"
    }
  }

  if [log_level][__class_uuid__] != "" {
    mutate {
      replace => {
        "uuid.key" => "__class_uuid__"
        "uuid.value" => "%{log_level.__class_uuid__}"
      }
      on_error => "err1"
    }

    mutate {
      merge => {
        "event.idm.read_only_udm.target.resource.attribute.labels" => "uuid"
      }
      on_error => "err1"
    }
  }

  if [log_level][name] != "" {
    mutate {
      replace => {
        "log_name.key" => "name"
        "log_name.value" => "%{log_level.name}"
      }
      on_error => "err1"
    }

    mutate {
      merge => {
        "event.idm.read_only_udm.target.resource.attribute.labels" => "log_name"
      }
      on_error => "err1"
    }
  }

  if [application][key] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.target.resource.id" => "%{application.key}"
      }
    }
  }

  if [event_type] == "authentication" {
    mutate {
      replace => {
        "event_type" => "USER_LOGIN"
      }
    }
  }
  else if [event_type] == "enrollment" {
    mutate {
      replace => {
        "event_type" => "USER_CREATION"
      }
    }
  }

  if [txid] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.network.session_id" => "%{txid}"
      }
    }
  }

  # UDM Target = auth_device
  if [user][name] != "" {
    mutate {
      rename => {
        "user.name" => "event.idm.read_only_udm.target.user.userid"
      }
    }
  }
  else if [username] != "" {
    mutate {
      rename => {
        "username" => "event.idm.read_only_udm.target.user.userid"
      }
      replace => {
        "event_type" => "USER_LOGIN"
      }
    }
  }
  else if [dn] != "" {
    grok {
      match => {
        "dn" => [
          "CN=%{DATA:userid},"
          "cn=%{DATA:userid},"
        ]
      }
      on_error => "grok_failed"
      overwrite => ["userid"]
    }
    if ![grok_failed] and [user] != "" {
      mutate {
        replace => {
          "event.idm.read_only_udm.target.user.userid" => "%{userid}"
          "event_type" => "USER_LOGIN"
        }
        on_error => "no_user"
      }
    }
  }
  if [user][key] != "" {
    mutate {
      rename => {
        "user.key" => "event.idm.read_only_udm.target.user.product_object_id"
      }
    }
  }
  # Gather all of the group identifiers
  for group in user.groups {
    if [group] != "" {
      mutate {
        merge => {
            "event.idm.read_only_udm.target.user.group_identifiers" => "group"
        }
      }
    }
  }
  # Phone number parsing
  if [message] !~ "location[^\w]:{[^}]+},[^\w]name[^\w]:null}" and [auth_device][name] != "" {
    # Normalize the phone number by removing spaces and hyphens
    mutate {
      gsub => ["auth_device.name", "[\\s-]", ""]
    }
    # Test if auth_device.name is a phone number
    # - don't capture the "+"" symbol as we'll add on later for consistency
    grok {
      match => {
          "auth_device.name" => [ "^(\\+)?(?P<phoneNo>(\\d){4,16})$" ]
      }
      on_error => "_not_phone_number"
    }
    if ![_not_phone_number] {
      # Add "+"" for consistency
      mutate {
        gsub => ["phoneNo", "(.*)", "+$1"]
      }
      mutate {
        merge => {
            "event.idm.read_only_udm.target.user.phone_numbers" => "phoneNo"
        }
      }
    }
    else {
      mutate {
        replace => {
          "event.idm.read_only_udm.target.hostname" => "%{auth_device.name}"
          "event.idm.read_only_udm.target.asset.hostname" => "%{auth_device.name}"
        }
      }
    }
  }
  else if [auth_device][name] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.target.hostname" => "%{auth_device.name}"
        "event.idm.read_only_udm.target.asset.hostname" => "%{auth_device.name}"
      }
      on_error => "no_auth_device_name"
    }
  }
  if [application][destination_name] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.target.application" => "%{application.destination_name}"
      }
      on_error => "no_application_destination_name"
    }
  }
  if [application][name] != "" {
    mutate {
      replace => {
        "application_name_label.value.string_value" => "%{application.name}"
      }
      on_error => "application_name_empty"
    }
    if ![application_name_empty] {
      mutate {
        replace => {
          "application_name_label.key" => "application_name"
        }
      }
      mutate {
        merge => {
          "event.idm.read_only_udm.additional.fields" => "application_name_label"
        }
        on_error => "application_name_label_empty"
      }
    }
  }
  if [auth_device][ip] not in ["","None"] {
    mutate {
      replace => {
        "_auth_device_ip" => "%{auth_device.ip}"
      }
    }
    mutate {
      merge => {
        "event.idm.read_only_udm.target.ip" => "_auth_device_ip"
        "event.idm.read_only_udm.target.asset.ip" => "_auth_device_ip"
      }
      on_error => "no_auth_device_ip"
    }
  }
  if [client_ip] not in ["","None"] {
    mutate {
      merge => {
        "event.idm.read_only_udm.target.ip" => "client_ip"
        "event.idm.read_only_udm.target.asset.ip" => "client_ip"
      }
      on_error => "no_client_ip"
    }
  }

  # Populates location for target if there is a value
  if [auth_device][location][city] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.target.location.city" => "%{auth_device.location.city}"
      }
    }
  }
  if [auth_device][location][country] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.target.location.country_or_region" => "%{auth_device.location.country}"
      }
    }
  }
  if [auth_device][location][state] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.target.location.state" => "%{auth_device.location.state}"
      }
    }
  }
  #End UDM Target

  #UDM Principal = access_device
  if [access_device][os_version] != "" {
    mutate {
      rename => {
        "access_device.os_version" => "event.idm.read_only_udm.principal.platform_version"
      }
    }
  }
  if [access_device][ip] != "" {
    mutate {
      replace => {
        "_access_device_ip" => "%{access_device.ip}"
      }
      on_error => "no_access_device_ip"
    }
    grok {
      match => {
        "_access_device_ip" => "%{IP:_access_device_ip}"
      }
      overwrite => ["_access_device_ip"]
      on_error => "no_ip"
    }
    if not [no_ip] {
      mutate {
        merge => {
          "event.idm.read_only_udm.principal.ip" => "_access_device_ip"
          "event.idm.read_only_udm.principal.asset.ip" => "_access_device_ip"
        }
        on_error => "no_access_device_ip"
      }
    } else {
      mutate {
        replace => {
          "event.idm.read_only_udm.principal.hostname" => "%{access_device.ip}"
          "event.idm.read_only_udm.principal.asset.hostname" => "%{access_device.ip}"
        }
        on_error => "no_access_device_ip"
      }
      mutate {
        replace => {
          "additional_ip.key" => "access_device.ip"
          "additional_ip.value.string_value" => "%{access_device.ip}"
        }
        on_error => "no_occurred_on_label"
      }
      if ![no_occurred_on_label] {
        mutate {
          merge => {
            "event.idm.read_only_udm.additional.fields" => "additional_ip"
          }
          on_error => "additonal_field_error"
        }
      }
    }
  }

  if [access_device][location][city] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.principal.location.city" => "%{access_device.location.city}"
      }
      on_error => "no_access_device_location_city"
    }
  }

  if [access_device][location][country] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.principal.location.country_or_region" => "%{access_device.location.country}"
      }
      on_error => "no_access_device_location_country"
    }
  }
  if [access_device][location][state] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.principal.location.state" => "%{access_device.location.state}"
      }
      on_error => "no_access_device_location_state"
    }
  }
  if [access_device][hostname] == "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.principal.hostname" => "%{access_device.hostname}"
      }
      on_error => "no_hostname"
    }
  }

  # Translates the operational system to the UDM expected values
  if [access_device][os] =~ "(?i)mac" {
    mutate {
      replace => {
        "event.idm.read_only_udm.principal.platform" => "MAC"
      }
    }
  }
  else if [access_device][os] =~ "(?i)windows" {
    mutate {
      replace => {
        "event.idm.read_only_udm.principal.platform" => "WINDOWS"
      }
    }
  }
  else if [access_device][os] =~ "(?i)linux" {
    mutate {
      replace => {
        "event.idm.read_only_udm.principal.platform" => "LINUX"
      }
    }
  }
  if [adaptive_trust_assessments][more_secure_auth][detected_attack_detectors] != "" {
    mutate {
      replace => {
        "adaptive_trust_assessments_more_secure_auth_detected_attack_detectors.key" => "detected_attack_detectors"
        "adaptive_trust_assessments_more_secure_auth_detected_attack_detectors.value.string_value" => "%{adaptive_trust_assessments.more_secure_auth.detected_attack_detectors}"
      }
      on_error => "no_adaptive_trust_assessments_more_secure_auth_detected_attack_detectors"
    }
    if ![no_adaptive_trust_assessments_more_secure_auth_detected_attack_detectors] {
      mutate {
        merge => {
          "event.idm.read_only_udm.additional.fields" => "adaptive_trust_assessments_more_secure_auth_detected_attack_detectors"
        }
        on_error => "no_adaptive_trust_assessments_more_secure_auth_detected_attack_detectors"
      }
    }
  }
  if [adaptive_trust_assessments][more_secure_auth][features_version] != "" {
    mutate {
      replace => {
        "adaptive_trust_assessments_more_secure_auth_features_version.key" => "features_version"
        "adaptive_trust_assessments_more_secure_auth_features_version.value" => "%{adaptive_trust_assessments.more_secure_auth.features_version}"
      }
      on_error => "no_adaptive_trust_assessments_more_secure_auth_features_version"
    }
    if ![no_adaptive_trust_assessments_more_secure_auth_features_version] {
      mutate {
        merge => {
          "event.idm.read_only_udm.security_result.detection_fields" => "adaptive_trust_assessments_more_secure_auth_features_version"
        }
        on_error => "no_adaptive_trust_assessments_more_secure_auth_features_version"
      }
    }
  }
  if [adaptive_trust_assessments][more_secure_auth][model_version] != "" {
    mutate {
      replace => {
        "adaptive_trust_assessments_more_secure_auth_model_version.key" => "model_version"
        "adaptive_trust_assessments_more_secure_auth_model_version.value" => "%{adaptive_trust_assessments.more_secure_auth.model_version}"
      }
      on_error => "no_adaptive_trust_assessments_more_secure_auth_model_version"
    }
    if ![no_adaptive_trust_assessments_more_secure_auth_model_version] {
      mutate {
        merge => {
          "event.idm.read_only_udm.security_result.detection_fields" => "adaptive_trust_assessments_more_secure_auth_model_version"
        }
        on_error => "no_adaptive_trust_assessments_more_secure_auth_model_version"
      }
    }
  }
  if [adaptive_trust_assessments][more_secure_auth][policy_enabled] != "" {
    mutate {
      convert => {
        "adaptive_trust_assessments.more_secure_auth.policy_enabled" => "string"
      }
      on_error => "already_a_string"
    }
    mutate {
      replace => {
        "adaptive_trust_assessments_more_secure_auth_policy_enabled.key" => "policy_enabled"
        "adaptive_trust_assessments_more_secure_auth_policy_enabled.value.string_value" => "%{adaptive_trust_assessments.more_secure_auth.policy_enabled}"
      }
      on_error => "no_adaptive_trust_assessments_more_secure_auth_policy_enabled"
    }
    if ![no_adaptive_trust_assessments_more_secure_auth_policy_enabled] {
      mutate {
        merge => {
          "event.idm.read_only_udm.additional.fields" => "adaptive_trust_assessments_more_secure_auth_policy_enabled"
        }
        on_error => "no_adaptive_trust_assessments_more_secure_auth_policy_enabled"
      }
    }
  }
  if [adaptive_trust_assessments][more_secure_auth][preview_mode_enabled] != "" {
    mutate {
      convert => {
        "adaptive_trust_assessments.more_secure_auth.preview_mode_enabled" => "string"
      }
      on_error => "already_a_string"
    }
    mutate {
      replace => {
        "adaptive_trust_assessments_more_secure_auth_preview_mode_enabled.key" => "preview_mode_enabled"
        "adaptive_trust_assessments_more_secure_auth_preview_mode_enabled.value.string_value" => "%{adaptive_trust_assessments.more_secure_auth.preview_mode_enabled}"
      }
      on_error => "no_adaptive_trust_assessments_more_secure_auth_preview_mode_enabled"
    }
    if ![no_adaptive_trust_assessments_more_secure_auth_preview_mode_enabled] {
      mutate {
        merge => {
          "event.idm.read_only_udm.additional.fields" => "adaptive_trust_assessments_more_secure_auth_preview_mode_enabled"
        }
        on_error => "no_adaptive_trust_assessments_more_secure_auth_preview_mode_enabled"
      }
    }
  }
  if [adaptive_trust_assessments][more_secure_auth][reason] != "" {
    mutate {
      replace => {
        "adaptive_trust_assessments_more_secure_auth_reason.key" => "reason"
        "adaptive_trust_assessments_more_secure_auth_reason.value.string_value" => "%{adaptive_trust_assessments.more_secure_auth.reason}"
      }
      on_error => "no_adaptive_trust_assessments_more_secure_auth_reason"
    }
    if ![no_adaptive_trust_assessments_more_secure_auth_reason] {
      mutate {
        merge => {
          "event.idm.read_only_udm.additional.fields" => "adaptive_trust_assessments_more_secure_auth_reason"
        }
        on_error => "no_adaptive_trust_assessments_more_secure_auth_reason"
      }
    }
  }
  if [adaptive_trust_assessments][more_secure_auth][trust_level] != "" {
    mutate {
      replace => {
        "adaptive_trust_assessments_more_secure_auth_trust_level.key" => "trust_level"
        "adaptive_trust_assessments_more_secure_auth_trust_level.value" => "%{adaptive_trust_assessments.more_secure_auth.trust_level}"
      }
      on_error => "no_adaptive_trust_assessments_more_secure_auth_trust_level"
    }
    if ![no_adaptive_trust_assessments_more_secure_auth_trust_level] {
      mutate {
        merge => {
          "event.idm.read_only_udm.security_result.detection_fields" => "adaptive_trust_assessments_more_secure_auth_trust_level"
        }
        on_error => "no_adaptive_trust_assessments_more_secure_auth_trust_level"
      }
    }
  }

  if [adaptive_trust_assessments][remember_me][features_version] != "" {
    mutate {
      replace => {
        "adaptive_trust_assessments_remember_me_features_version.key" => "remember_me_features_version"
        "adaptive_trust_assessments_remember_me_features_version.value" => "%{adaptive_trust_assessments.remember_me.features_version}"
      }
      on_error => "no_adaptive_trust_assessments_remember_me_features_version"
    }
    if ![no_adaptive_trust_assessments_remember_me_features_version] {
      mutate {
        merge => {
          "event.idm.read_only_udm.security_result.detection_fields" => "adaptive_trust_assessments_remember_me_features_version"
        }
        on_error => "no_adaptive_trust_assessments_remember_me_features_version"
      }
    }
  }
  if [adaptive_trust_assessments][remember_me][model_version] != "" {
    mutate {
      replace => {
        "adaptive_trust_assessments_remember_me_model_version.key" => "remember_me_model_version"
        "adaptive_trust_assessments_remember_me_model_version.value" => "%{adaptive_trust_assessments.remember_me.model_version}"
      }
      on_error => "no_adaptive_trust_assessments_remember_me_model_version"
    }
    if ![no_adaptive_trust_assessments_remember_me_model_version] {
      mutate {
        merge => {
          "event.idm.read_only_udm.security_result.detection_fields" => "adaptive_trust_assessments_remember_me_model_version"
        }
        on_error => "no_adaptive_trust_assessments_remember_me_model_version"
      }
    }
  }
  if [adaptive_trust_assessments][remember_me][policy_enabled] != "" {
    mutate {
      convert => {
        "adaptive_trust_assessments.remember_me.policy_enabled" => "string"
      }
      on_error => "already_a_string"
    }
    mutate {
      replace => {
        "adaptive_trust_assessments_remember_me_policy_enabled.key" => "remember_me_policy_enabled"
        "adaptive_trust_assessments_remember_me_policy_enabled.value.string_value" => "%{adaptive_trust_assessments.remember_me.policy_enabled}"
      }
      on_error => "no_adaptive_trust_assessments_remember_me_policy_enabled"
    }
    if ![no_adaptive_trust_assessments_remember_me_policy_enabled] {
      mutate {
        merge => {
          "event.idm.read_only_udm.additional.fields" => "adaptive_trust_assessments_remember_me_policy_enabled"
        }
        on_error => "no_adaptive_trust_assessments_remember_me_policy_enabled"
      }
    }
  }
  if [adaptive_trust_assessments][remember_me][reason] != "" {
    mutate {
      replace => {
        "adaptive_trust_assessments_remember_me_reason.key" => "remember_me_reason"
        "adaptive_trust_assessments_remember_me_reason.value.string_value" => "%{adaptive_trust_assessments.remember_me.reason}"
      }
      on_error => "no_adaptive_trust_assessments_remember_me_reason"
    }
    if ![no_adaptive_trust_assessments_remember_me_reason] {
      mutate {
        merge => {
          "event.idm.read_only_udm.additional.fields" => "adaptive_trust_assessments_remember_me_reason"
        }
        on_error => "no_adaptive_trust_assessments_remember_me_reason"
      }
    }
  }
  if [adaptive_trust_assessments][remember_me][trust_level] != "" {
    mutate {
      replace => {
        "adaptive_trust_assessments_remember_me_trust_level.key" => "remember_me_trust_level"
        "adaptive_trust_assessments_remember_me_trust_level.value" => "%{adaptive_trust_assessments.remember_me.trust_level}"
      }
      on_error => "no_adaptive_trust_assessments_remember_me_trust_level"
    }
    if ![no_adaptive_trust_assessments_remember_me_trust_level] {
      mutate {
        merge => {
          "event.idm.read_only_udm.security_result.detection_fields" => "adaptive_trust_assessments_remember_me_trust_level"
        }
        on_error => "no_adaptive_trust_assessments_remember_me_trust_level"
      }
    }
  }
  # For USER_CREATION event_type, the "Principal.user.userid" needs to be filled for successful validation.
  # Hence, if Access_device Hostname is unavailable in rawlog, change event_type to "USER_UNCATEGORIZED" for validation to succeed.
  # And if Hostname is available, fill the "Principal.user.userid" with the value.
  if [event_type] == "USER_CREATION" {
    if [access_device][hostname] == "" {
      mutate {
        replace => {
          "event_type" => "USER_UNCATEGORIZED"
        }
      }
    }
    else {
      mutate {
        replace => {
          "event.idm.read_only_udm.principal.user.userid" => "%{access_device.hostname}"
        }
        on_error => "no_hostname"
      }
    }
  }
  if [hostname] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.principal.hostname" => "%{hostname}"
      }
      on_error => "no_hostname"
    }
  }
  # End Principal

  # UDM Extensions
  # Translates factor to UDM MECHANISM correspondent value
  if [factor] != "" {
    if ([factor] == "hardware_token") {
      mutate {
        replace => {
          "_authMechanism" => "HARDWARE_KEY"
        }
      }
    }
    else if ([factor] in ["duo_push", "push1"]) {
      mutate {
        replace => {
          "_authMechanism" => "REMOTE_INTERACTIVE"
        }
      }
    }
    else if ([factor] == "remembered_device" or [factor] == "trusted_network") {
      mutate {
        replace => {
          "_authMechanism" => "LOCAL"
        }
      }
    }
    else if ([factor] in ["passcode", "duo_mobile_passcode", "sms_passcode", "u2f_token", "sms_refresh", "phone_call", "bypass_code", "yubikey_passcode", "digipass_go_7_token", "duo_mobile_passcode_hotp"]) {
      mutate {
        replace => {
          "_authMechanism" => "OTP"
        }
      }
    }
  }

  if [_authMechanism] != "" {
    mutate {
      merge => {
        "event.idm.read_only_udm.extensions.auth.mechanism" => "_authMechanism"
      }
    }
    mutate {
      replace => {
        "event.idm.read_only_udm.extensions.auth.auth_details" => "%{factor}"
      }
      on_error => "no_factor"
    }
  }

  if [email] != "" {
    mutate {
      merge => {
        "event.idm.read_only_udm.target.user.email_addresses" => "email"
      }
    }
  }

  mutate {
    replace => {
      "event.idm.read_only_udm.extensions.auth.type" => "SSO"
    }
  }
  # End of UDM Extensions

  # UDM Security Result
  # Translates result log field to UDM expected action value
  if [result] == "success" or [result] == "SUCCESS" {
    mutate {
      replace => {
        "_action" => "ALLOW"
      }
    }
  }
  else {
    mutate {
      replace => {
        "_action" => "BLOCK"
      }
    }
  }

  if [status] != "" {
    if [status] in ["Allow", "ALLOW", "allow"] {
      mutate {
        replace => {
          "_action" => "ALLOW"
        }
      }
    }
    else if [status] in ["Reject", "reject", "REJECT"] {
      mutate {
        replace => {
          "_action" => "BLOCK"
        }
      }
    }
  }

  if [result] != "" {
    mutate {
      replace => {
        "_security_result.action_details" => "%{result}"
      }
      on_error => "no_result"
    }
  }
  else if [status] != "" {
    mutate {
      replace => {
        "_security_result.action_details" => "%{status}"
      }
      on_error => "no_status"
    }
  }

  mutate {
    merge => {
      "_security_result.action" => "_action"
    }
    on_error => "no_action"
  }

  if [reason] != "" {
    mutate {
      replace => {
        "_security_result.summary" => "%{reason}"
      }
      on_error => "no_reason"
    }
  }
  else if [msg] != "" {
    mutate {
      replace => {
        "_security_result.summary" => "%{msg}"
      }
      on_error => "no_msg"
    }
  }

  if [log_level][name] != "" {
    if [log_level][name] == "info" {
      mutate {
        replace => {
          "security_result.severity" => "INFORMATIONAL"
        }
      }
    }
  }
  mutate {
    merge => {
      "event.idm.read_only_udm.security_result" => "_security_result"
    }
    on_error => "no_security_result"
  }
  # End Security Result

  mutate {
    replace => {
      "event.idm.read_only_udm.metadata.product_name" => "MULTI-FACTOR_AUTHENTICATION"
      "event.idm.read_only_udm.metadata.vendor_name" => "DUO_SECURITY"
    }
  }

  if [event_type] == "" {
    mutate {
      replace => {
        "event_type" => "GENERIC_EVENT"
      }
    }
  }

  mutate {
    rename => {
      "txid" => "event.idm.read_only_udm.metadata.product_log_id"
      "event_type" => "event.idm.read_only_udm.metadata.event_type"
    }
  }
  # End Metadata

  mutate {
    merge => {
      "@output" => "event"
    }
  }
}
